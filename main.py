"""
Only intended for use between two YouTube channels, where channel A will have
its subscriptions copied to channel B. Only available through command line
execution. 
When granting authorization, inspect the URL upon being redirected
to localhost and copy the "code" parameter to the terminal. Complete this
process for both channel A and channel B.
No command line flags are needed to run this script, just execute
`python main.py` from the same directory.

For cost-purposes, create your own GCP project and generate a
client secret file for OAuth credentials. Creating subscriptions consumes 50
quota units, so without a quota increase this script will need to be run
once a day until all subscriptions have been copied to channel B.
"""

from obj import Youtube

DESIRED_SUBS_AUTH_PROMPT = """
Please authorize the application to access the data for the user you want to
export subscriptions from.
"""

EXISTING_SUBS_AUTH_PROMPT = """
Please authorize the application to access the data for the user you want to
import subscriptions to.
"""

desired_subs = {}
existing_subs = {}

def getSubscriptions(youtube, pageToken=None, desired=False):
  """
  Retrieves all subscriptions a YouTube channel has. Saves subscriptions to a
  dictionary.

  Args:
      youtube (Resource): The resource for a particular user that requests
          should be sent to.
      pageToken (string): The token generated by a
          youtube.subscriptions().list() call indicating which page of the
          request to access.
      desired (bool): whether the subscriptions gathered are designated for
          importing, or already exist for a user
  """
  request = youtube.subscriptions().list(
    part='snippet,id',
    mine=True,
    maxResults=50,
    pageToken=pageToken
  )
  subs_response = request.execute()
  for item in subs_response['items']:
      snippet = item['snippet']
      title = snippet['title']
      if desired:
        desired_subs[snippet['resourceId']['channelId']] = title
      else:
        existing_subs[snippet['resourceId']['channelId']] = title
  if 'nextPageToken' in subs_response:
    getSubscriptions(youtube, subs_response['nextPageToken'], desired)

def addSubscriptions(existing_youtube, pending_subs):
  """
  Subscribes Channel B to all pending channels.

  Args:
    existing_youtube (Resource): The resource for Channel B that requests are
        sent to.
    pending_subs (Dict[str: str]): A mapping of channelIDs to channel names.
  """
  with open('completed_subs.tsv', 'a', encoding='utf-8') as f:
    for id, name in pending_subs.items():
      try:
        request = existing_youtube.subscriptions().insert(
          part='id,snippet,contentDetails',
          body={
            "snippet": {
              "resourceId": {
                "channelId": id
              }
            }
          }
        )
        request.execute()
        f.write(id + '\t' + name + '\n')
      except Exception as e:
        print(f"An error occurred while adding a subscription: {e}")

def main():
  # Create Resources for Channel A and Channel B
  desired_youtube = Youtube.Youtube(
    'client_secret.json').getAuthenticatedService(DESIRED_SUBS_AUTH_PROMPT)
  existing_youtube = Youtube.Youtube(
    'client_secret.json').getAuthenticatedService(EXISTING_SUBS_AUTH_PROMPT)
  
  # Save subscriptions to appropriate dictionaries
  getSubscriptions(desired_youtube, desired=True)
  getSubscriptions(existing_youtube, desired=False)

  # Copy subscriptions from Channel A to Channel B
  pending_subs = {id: name for id, name in desired_subs.items() if id not in existing_subs}
  print(f'{len(pending_subs)} channels remaining to subscribe:')
  print(pending_subs)
  addSubscriptions(existing_youtube, pending_subs)

  

if __name__ == "__main__":
  main()